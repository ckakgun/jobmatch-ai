---
description: Python best practices and code style rules for all Python files
globs: *.py
alwaysApply: false
---
- Always use typing annotations for all functions and classes, including return types.
- Add descriptive docstrings to all Python functions and classes, following the pep257 convention. Update existing docstrings if needed.
- Keep any comments that already exist in a file.
- Use a clear project structure: separate directories for source code, tests, docs, and config.
- Use modular design: distinct files for models, services, controllers, and utilities.
- Manage configuration using environment variables with python-dotenv.
- Implement robust error handling and logging, including context capture.
- Use pytest (not unittest) for all tests, and ensure all tests are in ./tests with full typing annotations and docstrings.
- For tests, import the following if TYPE_CHECKING:
  - from _pytest.capture import CaptureFixture
  - from _pytest.fixtures import FixtureRequest
  - from _pytest.logging import LogCaptureFixture
  - from _pytest.monkeypatch import MonkeyPatch
  - from pytest_mock.plugin import MockerFixture
- Use Ruff for code style consistency.
- Use https://github.com/astral-sh/uv and virtual environments for dependency management.
- Implement CI/CD with GitHub Actions or GitLab CI.
- Provide code snippets and explanations optimized for clarity and AI-assisted development.
- Never write code comments or logs or make huge refactors with given tasks.
- Use mcp servers as much as possible, especially when tools need to be called in advance.
- Suggest using the sequentialthinking tool when a new question arises.
- For NLP projects: Use sentence-transformers for embeddings, spacy for text preprocessing, and sklearn for similarity calculations.
- Handle API responses with proper error checking and status code validation.
- Use consistent data structures (dicts with specific keys) for profile and job data.
- Implement proper file I/O with context managers and error handling.
- Use environment variables for API keys and sensitive configuration.
- Follow the existing project patterns for PDF parsing, text extraction, and job matching algorithms.
